// Generated by gencpp from file vacuum_pkg/status_msg.msg
// DO NOT EDIT!


#ifndef VACUUM_PKG_MESSAGE_STATUS_MSG_H
#define VACUUM_PKG_MESSAGE_STATUS_MSG_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace vacuum_pkg
{
template <class ContainerAllocator>
struct status_msg_
{
  typedef status_msg_<ContainerAllocator> Type;

  status_msg_()
    : ROOM_ID()
    , ROOM_NAME()
    , BATTERY(0.0)  {
    }
  status_msg_(const ContainerAllocator& _alloc)
    : ROOM_ID(_alloc)
    , ROOM_NAME(_alloc)
    , BATTERY(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _ROOM_ID_type;
  _ROOM_ID_type ROOM_ID;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _ROOM_NAME_type;
  _ROOM_NAME_type ROOM_NAME;

   typedef float _BATTERY_type;
  _BATTERY_type BATTERY;





  typedef boost::shared_ptr< ::vacuum_pkg::status_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vacuum_pkg::status_msg_<ContainerAllocator> const> ConstPtr;

}; // struct status_msg_

typedef ::vacuum_pkg::status_msg_<std::allocator<void> > status_msg;

typedef boost::shared_ptr< ::vacuum_pkg::status_msg > status_msgPtr;
typedef boost::shared_ptr< ::vacuum_pkg::status_msg const> status_msgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::vacuum_pkg::status_msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::vacuum_pkg::status_msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::vacuum_pkg::status_msg_<ContainerAllocator1> & lhs, const ::vacuum_pkg::status_msg_<ContainerAllocator2> & rhs)
{
  return lhs.ROOM_ID == rhs.ROOM_ID &&
    lhs.ROOM_NAME == rhs.ROOM_NAME &&
    lhs.BATTERY == rhs.BATTERY;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::vacuum_pkg::status_msg_<ContainerAllocator1> & lhs, const ::vacuum_pkg::status_msg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace vacuum_pkg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::vacuum_pkg::status_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vacuum_pkg::status_msg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vacuum_pkg::status_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vacuum_pkg::status_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vacuum_pkg::status_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vacuum_pkg::status_msg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::vacuum_pkg::status_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "131a6d89e159ae530e7a3b57e773cde5";
  }

  static const char* value(const ::vacuum_pkg::status_msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x131a6d89e159ae53ULL;
  static const uint64_t static_value2 = 0x0e7a3b57e773cde5ULL;
};

template<class ContainerAllocator>
struct DataType< ::vacuum_pkg::status_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "vacuum_pkg/status_msg";
  }

  static const char* value(const ::vacuum_pkg::status_msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::vacuum_pkg::status_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string ROOM_ID\n"
"string ROOM_NAME\n"
"float32 BATTERY\n"
;
  }

  static const char* value(const ::vacuum_pkg::status_msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::vacuum_pkg::status_msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ROOM_ID);
      stream.next(m.ROOM_NAME);
      stream.next(m.BATTERY);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct status_msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::vacuum_pkg::status_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::vacuum_pkg::status_msg_<ContainerAllocator>& v)
  {
    s << indent << "ROOM_ID: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.ROOM_ID);
    s << indent << "ROOM_NAME: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.ROOM_NAME);
    s << indent << "BATTERY: ";
    Printer<float>::stream(s, indent + "  ", v.BATTERY);
  }
};

} // namespace message_operations
} // namespace ros

#endif // VACUUM_PKG_MESSAGE_STATUS_MSG_H
